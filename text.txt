 initDataUnsafe: {
    query_id: 'AAGYe81ZAAAAAJh7zVmjf6dA',
    user: {
      id: 1506638744,
      first_name: 'Dark',
      last_name: 'Larens',
      username: 'darklarens',
      language_code: 'ru',
      is_premium: true,
      allows_write_to_pm: true
    },
    auth_date: '1725028477',
    hash: '38e69fd748845bf961be3ec29b51f312af5207b9ba944a93dfce773b12460e0b'
  },
  version: '7.4',
  platform: 'macos',
  colorScheme: 'dark',
  
 initDataUnsafe: {
    query_id: 'AAGYe81ZAAAAAJh7zVlxa2kH',
    user: {
      id: 1506638744,
      first_name: 'Dark',
      last_name: 'Larens',
      username: 'darklarens',
      language_code: 'ru',
      is_premium: true,
      allows_write_to_pm: true
    },
    auth_date: '1725028702',
    hash: '291256a155b7cc9fe6a11c6d27740e10f966772e275a8b32930dcae5f5b3a640'
  },
  version: '7.4',
  platform: 'macos',
  colorScheme: 'dark',





  //Проферка хеша 
function verifyTelegramData(initDataString) {
    // Парсим строку initData в объект
    const initData = querystring.parse(initDataString);

    // Извлекаем токен бота из переменных окружения
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    // Отделяем хеш от остальных данных
    const { hash, ...data } = initData;

    // Преобразуем поле user из URL-кодированной строки JSON обратно в JSON строку
    if (data.user && typeof data.user === 'string') {
        data.user = JSON.stringify(JSON.parse(data.user)); // Убедимся, что поле user в нужном формате
    }

    // Сортируем ключи и создаем строку проверки данных
    const sortedKeys = Object.keys(data).sort();
    const dataCheckString = sortedKeys
        .map(key => `${key}=${data[key]}`)
        .join('\n'); // Используем '\n' как разделитель

    // Создаем секретный ключ используя HMAC-SHA256 и строку "WebAppData"
    const secretKey = crypto.createHmac('sha256', "WebAppData")
        .update(botToken)
        .digest();

    // Генерируем проверочный хеш с использованием секретного ключа
    const checkHash = crypto.createHmac('sha256', secretKey)
        .update(dataCheckString)
        .digest('hex');

    // Печатаем для отладки
    //console.log('Строка проверки данных:', dataCheckString);
    //console.log('Секретный ключ (hex):', secretKey.toString('hex'));
    //console.log('Сгенерированный хеш:', checkHash);
    //console.log('Полученный хеш от Telegram:', hash);

    // Сравниваем проверочный хеш с хешем из данных Telegram
    if(checkHash === hash){
        return {hash: true, data:initData};
    }else{
        return {hash: false};
    }
    
}