const express = require("express");
const path = require('path');
const fs = require('fs');
const TeleBot = require('telebot');
const UserService = require('../services/servicesUser');
const service = new UserService.UserService();
const { verifyTelegramData, createToken, verifyAndRefreshToken } = require('../verify');
//const { update } = require("lodash");
const router = express.Router();
const uploadsDir = path.join(__dirname, '../processed');
require('dotenv').config();
const bot = new TeleBot({token: process.env.TELEGRAM_BOT_TOKEN,usePlugins: ['askUser']});
bot.on('/start', msg=>{bot.sendMessage(msg.from.id,'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "peach"\n<a href="https://t.me/+cyf3SRSBm2k4NTky">–ù–∞—à —á–∞—Ç</a>',{parseMode:'html'})})
// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 
router.post("/", async (req, res) => {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
  try {
    const data = req.body;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞
    const isValid = verifyTelegramData(data.initData);
    if (isValid.hash) {
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —é–∑–µ—Ä–∞
      const dataStr = isValid.data.user.replace(/"([^"]+)":/g, '$1:');
      const jsonString = dataStr.replace(/(\w+):/g, '"$1":'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–π
      const dataUser = JSON.parse(jsonString);
      // –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
      const userCheck = await service.userLoader(dataUser);
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const token = createToken(dataUser, process.env.JWT);
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      //console.log(userCheck)
      const outData = { ...userCheck, token };
      res.send(outData);
    } else {
      res.sendStatus(502);
    }
  } catch (error) {
    console.log(error);
    res.sendStatus(502);
  }
});

router.post('/ankets', async(req,res)=>{
  console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç')
  try{
    const data = req.body
    //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const veryfToken = await verifyAndRefreshToken(data.token)
    if(veryfToken.token != null){
      console.log(data.actions)
      const actionsA = await service.actionsAnkets(veryfToken.decoded.id,data.actions)
      if(actionsA){
        if(actionsA.match.length > 0){await service.sendMessageToUsers(actionsA.match,'–£ –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–ª–∞—Å—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è üíû. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',bot)}
        if(actionsA.like.length > 0){await service.sendMessageToUsers(actionsA.like,'–í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ üíñ')}
      }
      const userAnket = await service.getAnketsForUser(veryfToken.decoded.id,data.page)
      if(userAnket){
        res.send({token:veryfToken.token,data:userAnket, update:actionsA})
      }else{
        res.send({token:veryfToken.token,data:userAnket, update:actionsA})
      }
    }else{
      res.send({token:'0000000000',data:'0000000000'})
    }
  } catch (err){
    console.log(err)
    res.send({token:'0000000000',data:'0000000000'})
  }
})

router.post('/match', async(req,res)=>{
  console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–Ω—ã—Ö –∞–Ω–∫–µ—Ç')
  try{
    const data = req.body
    //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const veryfToken = await verifyAndRefreshToken(data.token)
    if(veryfToken.token != null){
      // –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π 
      const getMatchUsers = await service.matchAnkets(veryfToken.decoded.id)
      const getMeLikes = await service.getMeLikes(veryfToken.decoded.id)
      console.log(getMeLikes)
      if(getMatchUsers|| getMeLikes){
        res.send({token:veryfToken.token,data:getMatchUsers,myLike:getMeLikes})
      }else{
        res.send({token:veryfToken.token,data:false,myLike:false})
      }
    }else{
      res.send({token:'0000000000',data:false})
    }
  } catch (err){
    console.log(err)
    res.send({token:'0000000000',data:false})
  }
})

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
router.get('/f1/:filename', (req, res) => {
  const { filename } = req.params;
  const filepath = path.join(uploadsDir, filename);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
  fs.access(filepath, fs.constants.F_OK, (err) => {
    if (err) {
      return res.status(404).send({ success: false, message: 'Image not found' });
    }
    res.sendFile(filepath);
  });
});

router.post('/getPeachUser', async(req,res)=>{
  const data = req.body.data
  const getter = await service.getInfoUser(data.ttid)
  bot.sendMessage(data.tid,`–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å <a href="tg://user?id=${data.ttid}">${data.ancetName}</a>\n@${getter[0].username}`,{parseMode:'html'})
  res.sendStatus(200)
})

bot.start();

module.exports = router;